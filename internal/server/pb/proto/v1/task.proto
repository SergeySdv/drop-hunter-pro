syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "v1/shared.proto";
import "v1/withdraw.proto";

package task;
option go_package = "grpc/v1";


enum TaskType {
  StargateBridge = 0;
  Mock = 1;
  Delay = 2;
  WithdrawExchange = 3;
}


message WithdrawExchangeTask {
  string withdrawer_id = 1;
  string network = 2;
  string amount_min = 3;
  string amount_max = 4;
  string token = 6;

  optional string withdraw_order_id = 7;
  optional string amount = 8;
  optional string tx_id = 9;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["withdrawer_id", "network", "amount_min", "amount_max", "token", "withdraw_order_id"]
    }
  };
}

message StargateBridgeTask {
  shared.Network fromNetwork = 1;
  shared.Network toNetwork = 2;
  shared.Token fromToken = 3;
  shared.Token toToken = 4;

  optional string fee = 5;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["fromNetwork", "toNetwork", "fromToken", "toToken"]
    }
  };
}

message MockTask  {

}

message DelayTask {
  int64 duration = 1;
  optional google.protobuf.Timestamp wait_for = 2;
  bool random = 3;
  optional int64 min_random = 4;
  optional int64 max_random = 5;
  optional string random_duration = 6;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["duration", "random"]
    }
  };
}
