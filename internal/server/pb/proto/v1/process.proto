syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "v1/flow.proto";
import "v1/profile.proto";
import "v1/shared.proto";

package process;
option go_package = "grpc/v1";

service ProcessService {
  rpc StopProcess(StopProcessRequest) returns (StopProcessResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/process/stop",
      body: "*"
    };
  }
  rpc ResumeProcess(ResumeProcessRequest) returns (ResumeProcessResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/process/resume",
      body: "*"
    };
  }
  rpc CancelProcess(CancelProcessRequest) returns (CancelProcessResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/process/cancel",
      body: "*"
    };
  }

  rpc CreateProcess(CreateProcessRequest) returns (CreateProcessResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/process/create",
      body: "*"
    };
  }

  rpc GetProcessTaskHistory(GetProcessTaskHistoryRequest) returns (GetProcessTaskHistoryResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/process/task/history",
      body: "*"
    };
  }

  rpc GetProcess(GetProcessRequest) returns (GetProcessResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/process/get",
      body: "*"
    };
  }

  rpc GetProcessUpdatedAt(GetProcessUpdatedAtRequest) returns (GetProcessUpdatedAtResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/process/updatedAt",
      body: "*"
    };
  }

  rpc ListProcess(ListProcessRequest) returns (ListProcessResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/process/list",
      body: "*"
    };
  }

  rpc RetryProcess(RetryProcessRequest) returns (RetryProcessResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/process/retry",
      body: "*"
    };
  }
}

message CancelProcessRequest {
  string process_id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["process_id"]
    }
  };
}

message CancelProcessResponse {

}

message GetProcessTaskHistoryRequest {
  string task_id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["task_id"]
    }
  };
}

message GetProcessTaskHistoryResponse {
  repeated ProcessTaskHistoryRecord records = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["records"]
    }
  };
}

message StopProcessRequest {
  string process_id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["process_id"]
    }
  };
}

message ResumeProcessRequest {
  string process_id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["process_id"]
    }
  };
}

message ResumeProcessResponse {

}

message StopProcessResponse {
}

message ProcessTaskHistoryRecord {
  string id = 1;
  string task_id = 2;
  google.protobuf.Timestamp started_at = 3;
  optional google.protobuf.Timestamp finished_at = 4;
  shared.ProcessStatus start_status = 5;
  optional shared.ProcessStatus finish_status = 6;
  optional string msg = 7;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "task_id", "started_at", "start_status"]
    }
  };
}

message GetProcessUpdatedAtRequest {
  string process_id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["process_id"]
    }
  };
}


message GetProcessUpdatedAtResponse {
  google.protobuf.Timestamp updated_at = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["updated_at"]
    }
  };
}


message RetryProcessRequest {
  string process_id = 1;
  string profile_id = 2;
  string task_id = 3;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["process_id", "profile_id", "task_id"]
    }
  };
}

message RetryProcessResponse {

}

message ListProcessRequest {

}


message ListProcessResponse {
  repeated Process processes = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["processes"]
    }
  };
}

message GetProcessRequest {
  string id = 1;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message GetProcessResponse {
    Process process = 1;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["process"]
    }
  };
}

message CreateProcessRequest {
  string flow_id = 1;
  repeated string profile_ids = 2;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["flow_id", "profile_ids"]
    }
  };
}

message CreateProcessResponse {
  Process process = 1;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["process"]
    }
  };
}



message Process {
  string id = 1;

  shared.ProcessStatus status = 2;
  repeated ProcessProfile profiles = 3;
  string flow_id = 5;

  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  optional google.protobuf.Timestamp finished_at = 8;
  optional google.protobuf.Timestamp started_at = 9;
  string flow_label = 10;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "status", "profiles", "flow_id","created_at", "updated_at", "flow_label"]
    }
  };
}

message ProcessProfile {
  string profile_id = 1;
  int64 weight = 2;
  repeated ProcessTask tasks = 3;
  shared.ProcessStatus status = 4;
  string id = 8;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["profile_id", "weight", "tasks", "status", "id"]
    }
  };
}

message ProcessTask {
  flow.Task task = 1;
  shared.ProcessStatus status = 2;
  repeated string transactions = 3;
  optional google.protobuf.Timestamp finished_at = 4;
  optional google.protobuf.Timestamp started_at = 5;
  optional string error = 6;
  string id = 7;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["task", "status", "transactions", "id"]
    }
  };
}

