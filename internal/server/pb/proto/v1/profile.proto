syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "v1/flow.proto";
import "v1/shared.proto";

package profile;
option go_package = "grpc/v1";

service ProfileService {
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/profile/update",
      body: "*"
    };
  }
  rpc ValidateLabel(ValidateLabelRequest) returns (ValidateLabelResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/profile/label/validate",
      body: "*"
    };
  }
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/profile/balance",
      body: "*"
    };
  }
  rpc SearchProfile(SearchProfileRequest) returns (SearchProfileResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/profile/search",
      body: "*"
    };
  }
  rpc CreateProfile(CreateProfileRequest) returns (CreateProfileResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/profile/add",
      body: "*"
    };
  }

  rpc ListProfile(ListProfileRequest) returns (ListProfileResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/profile/list",
      body: "*"
    };
  }

  rpc DeleteProfile(DeleteProfileRequest) returns (DeleteProfileResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/profile/delete",
      body: "*"
    };
  }
  rpc GetProfile(GetProfileRequest) returns (GetProfileResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/profile/get",
      body: "*"
    };
  }
}

message UpdateProfileResponse {
  Profile profile = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["profile"]
    }
  };
}

message UpdateProfileRequest {
  string profile_id = 1;
  optional string proxy = 2;
  optional string meta = 3;
  optional OkexAccount okex_account = 4;
  string label = 5;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["profile_id", "label"]
    }
  };
}

message OkexAccount {
  string sub_acc_name = 1;
  string deposit_addr = 2;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["sub_acc_name", "deposit_addr"]
    }
  };
}

message ValidateLabelRequest {
  string label = 1;
  optional string profile_id = 2;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["label"]
    }
  };
}

message ValidateLabelResponse {
  bool valid = 1;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["valid"]
    }
  };
}

message GetProfileRequest {
  string profile_id = 1;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["profile_id"]
    }
  };
}

message GetProfileResponse {
  Profile profile = 1;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["profile"]
    }
  };
}

message GetBalanceRequest {
  string profile_id = 1;
  shared.Network network = 2;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["profile_id", "network"]
    }
  };
}


message GetBalanceResponse {
  repeated Balance balance = 1;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["balance"]
    }
  };
}


message Balance {
  shared.Token token = 1;
  string amount = 2;
  string wei = 3;
  optional string error = 4;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["token", "amount", "wei"]
    }
  };
}

message SearchProfileRequest {
  string pattern = 1;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["pattern"]
    }
  };
}

message SearchProfileResponse {
  repeated Profile profiles = 2;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["profiles"]
    }
  };
}

message Profile {
  string id = 1;
  string label = 2;
  optional string proxy = 3;
  string mmsk_id = 4;
  optional string meta = 5;
  google.protobuf.Timestamp created_at = 6;
  optional OkexAccount okex_account = 7;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "label", "meta", "created_at", "mmsk_id"]
    }
  };
}

message CreateProfileRequest {
  string label = 1;
  optional string proxy = 2;
  string mmsk_pk = 3;
  optional string meta = 4;
  optional OkexAccount okex_account = 5;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["label", "mmsk_pk"]
    }
  };
}

message CreateProfileResponse {
    Profile profile = 1;
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        required: ["profile"]
      }
    };
}

message ListProfileRequest {

}

message ListProfileResponse {
  repeated Profile profiles = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["profiles"]
    }
  };
}

message DeleteProfileRequest {
  string id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message DeleteProfileResponse {

}