syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

package withdrawer;
option go_package = "grpc/v1";

service WithdrawerService {
  rpc CreateWithdrawer(CreateWithdrawerRequest) returns (CreateWithdrawerResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/withdrawer/add",
      body: "*"
    };
  }

  rpc ListWithdrawer(ListWithdrawerRequest) returns (ListWithdrawerResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/withdrawer/list",
      body: "*"
    };
  }

  rpc DeleteWithdrawer(DeleteWithdrawerRequest) returns (DeleteWithdrawerResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/withdrawer/delete",
      body: "*"
    };
  }

  rpc GetExchangeWithdrawOptions(GetExchangeWithdrawOptionsRequest) returns (GetExchangeWithdrawOptionsResponse) {
    option (google.api.http) = {
      post: "/api/gw/api/v1/withdrawer/exchange/options",
      body: "*"
    };
  }
}

message GetExchangeWithdrawOptionsResponse {
  repeated ExchangeWithdrawOptions tokens = 1;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["tokens"]
    }
  };
}

message ExchangeWithdrawOptions {
  string token = 1;
  string amount = 2;
  repeated ExchangeWithdrawNetwork networks = 3;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["token", "networks", "amount"]
    }
  };
}

message ExchangeWithdrawNetwork {
  string network = 1;
  string min_amount = 2;
  string max_amount = 3;
  string fee = 4;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["network", "min_amount", "max_amount", "fee"]
    }
  };
}

message GetExchangeWithdrawOptionsRequest {
  string withdrawer_id = 1;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["withdrawer_id"]
    }
  };
}

message ExchangeTokenBalance {
  string token = 1;
  string amount = 2;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["token", "amount"]
    }
  };
}

enum ExchangeType {
  Binance = 0;
}
message Withdrawer {
  string id = 1;
  ExchangeType exchange_type = 2;
  string label = 3;
  string secret_key = 4;
  string api_key = 5;
  optional string proxy = 6;
  google.protobuf.Timestamp created_at = 7;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "exchange_type", "label", "secret_key", "api_key", "proxy", "created_at"]
    }
  };
}

message CreateWithdrawerRequest {
  ExchangeType exchange_type = 1;
  string label = 2;
  string secret_key = 4;
  string api_key = 5;
  optional string proxy = 6;

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["exchange_type", "label", "secret_key", "api_key"]
    }
  };
}

message CreateWithdrawerResponse {
    Withdrawer withdrawer = 1;
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
      json_schema: {
        required: ["withdrawer"]
      }
    };
}

message ListWithdrawerRequest {

}

message ListWithdrawerResponse {
  repeated Withdrawer withdrawers = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["withdrawers"]
    }
  };
}

message DeleteWithdrawerRequest {
  string id = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
}

message DeleteWithdrawerResponse {

}