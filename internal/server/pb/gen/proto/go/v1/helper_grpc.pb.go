// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/helper.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelperServiceClient is the client API for HelperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelperServiceClient interface {
	EstimateStargateBridgeFee(ctx context.Context, in *EstimateStargateBridgeFeeRequest, opts ...grpc.CallOption) (*EstimateStargateBridgeFeeResponse, error)
	ValidatePK(ctx context.Context, in *ValidatePKRequest, opts ...grpc.CallOption) (*ValidatePKResponse, error)
	ValidateProxy(ctx context.Context, in *ValidateProxyRequest, opts ...grpc.CallOption) (*ValidateProxyResponse, error)
}

type helperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelperServiceClient(cc grpc.ClientConnInterface) HelperServiceClient {
	return &helperServiceClient{cc}
}

func (c *helperServiceClient) EstimateStargateBridgeFee(ctx context.Context, in *EstimateStargateBridgeFeeRequest, opts ...grpc.CallOption) (*EstimateStargateBridgeFeeResponse, error) {
	out := new(EstimateStargateBridgeFeeResponse)
	err := c.cc.Invoke(ctx, "/helper.HelperService/EstimateStargateBridgeFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) ValidatePK(ctx context.Context, in *ValidatePKRequest, opts ...grpc.CallOption) (*ValidatePKResponse, error) {
	out := new(ValidatePKResponse)
	err := c.cc.Invoke(ctx, "/helper.HelperService/ValidatePK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperServiceClient) ValidateProxy(ctx context.Context, in *ValidateProxyRequest, opts ...grpc.CallOption) (*ValidateProxyResponse, error) {
	out := new(ValidateProxyResponse)
	err := c.cc.Invoke(ctx, "/helper.HelperService/ValidateProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelperServiceServer is the server API for HelperService service.
// All implementations must embed UnimplementedHelperServiceServer
// for forward compatibility
type HelperServiceServer interface {
	EstimateStargateBridgeFee(context.Context, *EstimateStargateBridgeFeeRequest) (*EstimateStargateBridgeFeeResponse, error)
	ValidatePK(context.Context, *ValidatePKRequest) (*ValidatePKResponse, error)
	ValidateProxy(context.Context, *ValidateProxyRequest) (*ValidateProxyResponse, error)
	mustEmbedUnimplementedHelperServiceServer()
}

// UnimplementedHelperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelperServiceServer struct {
}

func (UnimplementedHelperServiceServer) EstimateStargateBridgeFee(context.Context, *EstimateStargateBridgeFeeRequest) (*EstimateStargateBridgeFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateStargateBridgeFee not implemented")
}
func (UnimplementedHelperServiceServer) ValidatePK(context.Context, *ValidatePKRequest) (*ValidatePKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePK not implemented")
}
func (UnimplementedHelperServiceServer) ValidateProxy(context.Context, *ValidateProxyRequest) (*ValidateProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateProxy not implemented")
}
func (UnimplementedHelperServiceServer) mustEmbedUnimplementedHelperServiceServer() {}

// UnsafeHelperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelperServiceServer will
// result in compilation errors.
type UnsafeHelperServiceServer interface {
	mustEmbedUnimplementedHelperServiceServer()
}

func RegisterHelperServiceServer(s grpc.ServiceRegistrar, srv HelperServiceServer) {
	s.RegisterService(&HelperService_ServiceDesc, srv)
}

func _HelperService_EstimateStargateBridgeFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateStargateBridgeFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).EstimateStargateBridgeFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helper.HelperService/EstimateStargateBridgeFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).EstimateStargateBridgeFee(ctx, req.(*EstimateStargateBridgeFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_ValidatePK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).ValidatePK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helper.HelperService/ValidatePK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).ValidatePK(ctx, req.(*ValidatePKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelperService_ValidateProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServiceServer).ValidateProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helper.HelperService/ValidateProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServiceServer).ValidateProxy(ctx, req.(*ValidateProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelperService_ServiceDesc is the grpc.ServiceDesc for HelperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helper.HelperService",
	HandlerType: (*HelperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimateStargateBridgeFee",
			Handler:    _HelperService_EstimateStargateBridgeFee_Handler,
		},
		{
			MethodName: "ValidatePK",
			Handler:    _HelperService_ValidatePK_Handler,
		},
		{
			MethodName: "ValidateProxy",
			Handler:    _HelperService_ValidateProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/helper.proto",
}
