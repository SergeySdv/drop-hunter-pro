// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/flow.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlowServiceClient is the client API for FlowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowServiceClient interface {
	CreateFlow(ctx context.Context, in *CreateFlowRequest, opts ...grpc.CallOption) (*CreateFlowResponse, error)
	GetFlow(ctx context.Context, in *GetFlowRequest, opts ...grpc.CallOption) (*GetFlowResponse, error)
	ListFlow(ctx context.Context, in *ListFlowRequest, opts ...grpc.CallOption) (*ListFlowResponse, error)
	DeleteFlow(ctx context.Context, in *DeleteFlowRequest, opts ...grpc.CallOption) (*DeleteFlowResponse, error)
}

type flowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowServiceClient(cc grpc.ClientConnInterface) FlowServiceClient {
	return &flowServiceClient{cc}
}

func (c *flowServiceClient) CreateFlow(ctx context.Context, in *CreateFlowRequest, opts ...grpc.CallOption) (*CreateFlowResponse, error) {
	out := new(CreateFlowResponse)
	err := c.cc.Invoke(ctx, "/flow.FlowService/CreateFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) GetFlow(ctx context.Context, in *GetFlowRequest, opts ...grpc.CallOption) (*GetFlowResponse, error) {
	out := new(GetFlowResponse)
	err := c.cc.Invoke(ctx, "/flow.FlowService/GetFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) ListFlow(ctx context.Context, in *ListFlowRequest, opts ...grpc.CallOption) (*ListFlowResponse, error) {
	out := new(ListFlowResponse)
	err := c.cc.Invoke(ctx, "/flow.FlowService/ListFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) DeleteFlow(ctx context.Context, in *DeleteFlowRequest, opts ...grpc.CallOption) (*DeleteFlowResponse, error) {
	out := new(DeleteFlowResponse)
	err := c.cc.Invoke(ctx, "/flow.FlowService/DeleteFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowServiceServer is the server API for FlowService service.
// All implementations must embed UnimplementedFlowServiceServer
// for forward compatibility
type FlowServiceServer interface {
	CreateFlow(context.Context, *CreateFlowRequest) (*CreateFlowResponse, error)
	GetFlow(context.Context, *GetFlowRequest) (*GetFlowResponse, error)
	ListFlow(context.Context, *ListFlowRequest) (*ListFlowResponse, error)
	DeleteFlow(context.Context, *DeleteFlowRequest) (*DeleteFlowResponse, error)
	mustEmbedUnimplementedFlowServiceServer()
}

// UnimplementedFlowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlowServiceServer struct {
}

func (UnimplementedFlowServiceServer) CreateFlow(context.Context, *CreateFlowRequest) (*CreateFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlow not implemented")
}
func (UnimplementedFlowServiceServer) GetFlow(context.Context, *GetFlowRequest) (*GetFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlow not implemented")
}
func (UnimplementedFlowServiceServer) ListFlow(context.Context, *ListFlowRequest) (*ListFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlow not implemented")
}
func (UnimplementedFlowServiceServer) DeleteFlow(context.Context, *DeleteFlowRequest) (*DeleteFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlow not implemented")
}
func (UnimplementedFlowServiceServer) mustEmbedUnimplementedFlowServiceServer() {}

// UnsafeFlowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowServiceServer will
// result in compilation errors.
type UnsafeFlowServiceServer interface {
	mustEmbedUnimplementedFlowServiceServer()
}

func RegisterFlowServiceServer(s grpc.ServiceRegistrar, srv FlowServiceServer) {
	s.RegisterService(&FlowService_ServiceDesc, srv)
}

func _FlowService_CreateFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).CreateFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.FlowService/CreateFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).CreateFlow(ctx, req.(*CreateFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_GetFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).GetFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.FlowService/GetFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).GetFlow(ctx, req.(*GetFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_ListFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).ListFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.FlowService/ListFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).ListFlow(ctx, req.(*ListFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_DeleteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).DeleteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.FlowService/DeleteFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).DeleteFlow(ctx, req.(*DeleteFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowService_ServiceDesc is the grpc.ServiceDesc for FlowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flow.FlowService",
	HandlerType: (*FlowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlow",
			Handler:    _FlowService_CreateFlow_Handler,
		},
		{
			MethodName: "GetFlow",
			Handler:    _FlowService_GetFlow_Handler,
		},
		{
			MethodName: "ListFlow",
			Handler:    _FlowService_ListFlow_Handler,
		},
		{
			MethodName: "DeleteFlow",
			Handler:    _FlowService_DeleteFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/flow.proto",
}
