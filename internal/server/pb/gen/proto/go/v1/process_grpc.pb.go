// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/process.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessServiceClient is the client API for ProcessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessServiceClient interface {
	StopProcess(ctx context.Context, in *StopProcessRequest, opts ...grpc.CallOption) (*StopProcessResponse, error)
	ResumeProcess(ctx context.Context, in *ResumeProcessRequest, opts ...grpc.CallOption) (*ResumeProcessResponse, error)
	CancelProcess(ctx context.Context, in *CancelProcessRequest, opts ...grpc.CallOption) (*CancelProcessResponse, error)
	CreateProcess(ctx context.Context, in *CreateProcessRequest, opts ...grpc.CallOption) (*CreateProcessResponse, error)
	GetProcessTaskHistory(ctx context.Context, in *GetProcessTaskHistoryRequest, opts ...grpc.CallOption) (*GetProcessTaskHistoryResponse, error)
	GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*GetProcessResponse, error)
	GetProcessUpdatedAt(ctx context.Context, in *GetProcessUpdatedAtRequest, opts ...grpc.CallOption) (*GetProcessUpdatedAtResponse, error)
	ListProcess(ctx context.Context, in *ListProcessRequest, opts ...grpc.CallOption) (*ListProcessResponse, error)
	RetryProcess(ctx context.Context, in *RetryProcessRequest, opts ...grpc.CallOption) (*RetryProcessResponse, error)
}

type processServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessServiceClient(cc grpc.ClientConnInterface) ProcessServiceClient {
	return &processServiceClient{cc}
}

func (c *processServiceClient) StopProcess(ctx context.Context, in *StopProcessRequest, opts ...grpc.CallOption) (*StopProcessResponse, error) {
	out := new(StopProcessResponse)
	err := c.cc.Invoke(ctx, "/process.ProcessService/StopProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processServiceClient) ResumeProcess(ctx context.Context, in *ResumeProcessRequest, opts ...grpc.CallOption) (*ResumeProcessResponse, error) {
	out := new(ResumeProcessResponse)
	err := c.cc.Invoke(ctx, "/process.ProcessService/ResumeProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processServiceClient) CancelProcess(ctx context.Context, in *CancelProcessRequest, opts ...grpc.CallOption) (*CancelProcessResponse, error) {
	out := new(CancelProcessResponse)
	err := c.cc.Invoke(ctx, "/process.ProcessService/CancelProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processServiceClient) CreateProcess(ctx context.Context, in *CreateProcessRequest, opts ...grpc.CallOption) (*CreateProcessResponse, error) {
	out := new(CreateProcessResponse)
	err := c.cc.Invoke(ctx, "/process.ProcessService/CreateProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processServiceClient) GetProcessTaskHistory(ctx context.Context, in *GetProcessTaskHistoryRequest, opts ...grpc.CallOption) (*GetProcessTaskHistoryResponse, error) {
	out := new(GetProcessTaskHistoryResponse)
	err := c.cc.Invoke(ctx, "/process.ProcessService/GetProcessTaskHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processServiceClient) GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*GetProcessResponse, error) {
	out := new(GetProcessResponse)
	err := c.cc.Invoke(ctx, "/process.ProcessService/GetProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processServiceClient) GetProcessUpdatedAt(ctx context.Context, in *GetProcessUpdatedAtRequest, opts ...grpc.CallOption) (*GetProcessUpdatedAtResponse, error) {
	out := new(GetProcessUpdatedAtResponse)
	err := c.cc.Invoke(ctx, "/process.ProcessService/GetProcessUpdatedAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processServiceClient) ListProcess(ctx context.Context, in *ListProcessRequest, opts ...grpc.CallOption) (*ListProcessResponse, error) {
	out := new(ListProcessResponse)
	err := c.cc.Invoke(ctx, "/process.ProcessService/ListProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processServiceClient) RetryProcess(ctx context.Context, in *RetryProcessRequest, opts ...grpc.CallOption) (*RetryProcessResponse, error) {
	out := new(RetryProcessResponse)
	err := c.cc.Invoke(ctx, "/process.ProcessService/RetryProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessServiceServer is the server API for ProcessService service.
// All implementations must embed UnimplementedProcessServiceServer
// for forward compatibility
type ProcessServiceServer interface {
	StopProcess(context.Context, *StopProcessRequest) (*StopProcessResponse, error)
	ResumeProcess(context.Context, *ResumeProcessRequest) (*ResumeProcessResponse, error)
	CancelProcess(context.Context, *CancelProcessRequest) (*CancelProcessResponse, error)
	CreateProcess(context.Context, *CreateProcessRequest) (*CreateProcessResponse, error)
	GetProcessTaskHistory(context.Context, *GetProcessTaskHistoryRequest) (*GetProcessTaskHistoryResponse, error)
	GetProcess(context.Context, *GetProcessRequest) (*GetProcessResponse, error)
	GetProcessUpdatedAt(context.Context, *GetProcessUpdatedAtRequest) (*GetProcessUpdatedAtResponse, error)
	ListProcess(context.Context, *ListProcessRequest) (*ListProcessResponse, error)
	RetryProcess(context.Context, *RetryProcessRequest) (*RetryProcessResponse, error)
	mustEmbedUnimplementedProcessServiceServer()
}

// UnimplementedProcessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProcessServiceServer struct {
}

func (UnimplementedProcessServiceServer) StopProcess(context.Context, *StopProcessRequest) (*StopProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProcess not implemented")
}
func (UnimplementedProcessServiceServer) ResumeProcess(context.Context, *ResumeProcessRequest) (*ResumeProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeProcess not implemented")
}
func (UnimplementedProcessServiceServer) CancelProcess(context.Context, *CancelProcessRequest) (*CancelProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelProcess not implemented")
}
func (UnimplementedProcessServiceServer) CreateProcess(context.Context, *CreateProcessRequest) (*CreateProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcess not implemented")
}
func (UnimplementedProcessServiceServer) GetProcessTaskHistory(context.Context, *GetProcessTaskHistoryRequest) (*GetProcessTaskHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessTaskHistory not implemented")
}
func (UnimplementedProcessServiceServer) GetProcess(context.Context, *GetProcessRequest) (*GetProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcess not implemented")
}
func (UnimplementedProcessServiceServer) GetProcessUpdatedAt(context.Context, *GetProcessUpdatedAtRequest) (*GetProcessUpdatedAtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessUpdatedAt not implemented")
}
func (UnimplementedProcessServiceServer) ListProcess(context.Context, *ListProcessRequest) (*ListProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcess not implemented")
}
func (UnimplementedProcessServiceServer) RetryProcess(context.Context, *RetryProcessRequest) (*RetryProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryProcess not implemented")
}
func (UnimplementedProcessServiceServer) mustEmbedUnimplementedProcessServiceServer() {}

// UnsafeProcessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessServiceServer will
// result in compilation errors.
type UnsafeProcessServiceServer interface {
	mustEmbedUnimplementedProcessServiceServer()
}

func RegisterProcessServiceServer(s grpc.ServiceRegistrar, srv ProcessServiceServer) {
	s.RegisterService(&ProcessService_ServiceDesc, srv)
}

func _ProcessService_StopProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).StopProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.ProcessService/StopProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).StopProcess(ctx, req.(*StopProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessService_ResumeProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).ResumeProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.ProcessService/ResumeProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).ResumeProcess(ctx, req.(*ResumeProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessService_CancelProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).CancelProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.ProcessService/CancelProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).CancelProcess(ctx, req.(*CancelProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessService_CreateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).CreateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.ProcessService/CreateProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).CreateProcess(ctx, req.(*CreateProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessService_GetProcessTaskHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessTaskHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).GetProcessTaskHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.ProcessService/GetProcessTaskHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).GetProcessTaskHistory(ctx, req.(*GetProcessTaskHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessService_GetProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).GetProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.ProcessService/GetProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).GetProcess(ctx, req.(*GetProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessService_GetProcessUpdatedAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessUpdatedAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).GetProcessUpdatedAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.ProcessService/GetProcessUpdatedAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).GetProcessUpdatedAt(ctx, req.(*GetProcessUpdatedAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessService_ListProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).ListProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.ProcessService/ListProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).ListProcess(ctx, req.(*ListProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessService_RetryProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).RetryProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/process.ProcessService/RetryProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).RetryProcess(ctx, req.(*RetryProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessService_ServiceDesc is the grpc.ServiceDesc for ProcessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "process.ProcessService",
	HandlerType: (*ProcessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopProcess",
			Handler:    _ProcessService_StopProcess_Handler,
		},
		{
			MethodName: "ResumeProcess",
			Handler:    _ProcessService_ResumeProcess_Handler,
		},
		{
			MethodName: "CancelProcess",
			Handler:    _ProcessService_CancelProcess_Handler,
		},
		{
			MethodName: "CreateProcess",
			Handler:    _ProcessService_CreateProcess_Handler,
		},
		{
			MethodName: "GetProcessTaskHistory",
			Handler:    _ProcessService_GetProcessTaskHistory_Handler,
		},
		{
			MethodName: "GetProcess",
			Handler:    _ProcessService_GetProcess_Handler,
		},
		{
			MethodName: "GetProcessUpdatedAt",
			Handler:    _ProcessService_GetProcessUpdatedAt_Handler,
		},
		{
			MethodName: "ListProcess",
			Handler:    _ProcessService_ListProcess_Handler,
		},
		{
			MethodName: "RetryProcess",
			Handler:    _ProcessService_RetryProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/process.proto",
}
