// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/withdraw.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WithdrawerServiceClient is the client API for WithdrawerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithdrawerServiceClient interface {
	CreateWithdrawer(ctx context.Context, in *CreateWithdrawerRequest, opts ...grpc.CallOption) (*CreateWithdrawerResponse, error)
	ListWithdrawer(ctx context.Context, in *ListWithdrawerRequest, opts ...grpc.CallOption) (*ListWithdrawerResponse, error)
	DeleteWithdrawer(ctx context.Context, in *DeleteWithdrawerRequest, opts ...grpc.CallOption) (*DeleteWithdrawerResponse, error)
	GetExchangeWithdrawOptions(ctx context.Context, in *GetExchangeWithdrawOptionsRequest, opts ...grpc.CallOption) (*GetExchangeWithdrawOptionsResponse, error)
}

type withdrawerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawerServiceClient(cc grpc.ClientConnInterface) WithdrawerServiceClient {
	return &withdrawerServiceClient{cc}
}

func (c *withdrawerServiceClient) CreateWithdrawer(ctx context.Context, in *CreateWithdrawerRequest, opts ...grpc.CallOption) (*CreateWithdrawerResponse, error) {
	out := new(CreateWithdrawerResponse)
	err := c.cc.Invoke(ctx, "/withdrawer.WithdrawerService/CreateWithdrawer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) ListWithdrawer(ctx context.Context, in *ListWithdrawerRequest, opts ...grpc.CallOption) (*ListWithdrawerResponse, error) {
	out := new(ListWithdrawerResponse)
	err := c.cc.Invoke(ctx, "/withdrawer.WithdrawerService/ListWithdrawer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) DeleteWithdrawer(ctx context.Context, in *DeleteWithdrawerRequest, opts ...grpc.CallOption) (*DeleteWithdrawerResponse, error) {
	out := new(DeleteWithdrawerResponse)
	err := c.cc.Invoke(ctx, "/withdrawer.WithdrawerService/DeleteWithdrawer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawerServiceClient) GetExchangeWithdrawOptions(ctx context.Context, in *GetExchangeWithdrawOptionsRequest, opts ...grpc.CallOption) (*GetExchangeWithdrawOptionsResponse, error) {
	out := new(GetExchangeWithdrawOptionsResponse)
	err := c.cc.Invoke(ctx, "/withdrawer.WithdrawerService/GetExchangeWithdrawOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawerServiceServer is the server API for WithdrawerService service.
// All implementations must embed UnimplementedWithdrawerServiceServer
// for forward compatibility
type WithdrawerServiceServer interface {
	CreateWithdrawer(context.Context, *CreateWithdrawerRequest) (*CreateWithdrawerResponse, error)
	ListWithdrawer(context.Context, *ListWithdrawerRequest) (*ListWithdrawerResponse, error)
	DeleteWithdrawer(context.Context, *DeleteWithdrawerRequest) (*DeleteWithdrawerResponse, error)
	GetExchangeWithdrawOptions(context.Context, *GetExchangeWithdrawOptionsRequest) (*GetExchangeWithdrawOptionsResponse, error)
	mustEmbedUnimplementedWithdrawerServiceServer()
}

// UnimplementedWithdrawerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWithdrawerServiceServer struct {
}

func (UnimplementedWithdrawerServiceServer) CreateWithdrawer(context.Context, *CreateWithdrawerRequest) (*CreateWithdrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdrawer not implemented")
}
func (UnimplementedWithdrawerServiceServer) ListWithdrawer(context.Context, *ListWithdrawerRequest) (*ListWithdrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawer not implemented")
}
func (UnimplementedWithdrawerServiceServer) DeleteWithdrawer(context.Context, *DeleteWithdrawerRequest) (*DeleteWithdrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithdrawer not implemented")
}
func (UnimplementedWithdrawerServiceServer) GetExchangeWithdrawOptions(context.Context, *GetExchangeWithdrawOptionsRequest) (*GetExchangeWithdrawOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeWithdrawOptions not implemented")
}
func (UnimplementedWithdrawerServiceServer) mustEmbedUnimplementedWithdrawerServiceServer() {}

// UnsafeWithdrawerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithdrawerServiceServer will
// result in compilation errors.
type UnsafeWithdrawerServiceServer interface {
	mustEmbedUnimplementedWithdrawerServiceServer()
}

func RegisterWithdrawerServiceServer(s grpc.ServiceRegistrar, srv WithdrawerServiceServer) {
	s.RegisterService(&WithdrawerService_ServiceDesc, srv)
}

func _WithdrawerService_CreateWithdrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).CreateWithdrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/withdrawer.WithdrawerService/CreateWithdrawer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).CreateWithdrawer(ctx, req.(*CreateWithdrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_ListWithdrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).ListWithdrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/withdrawer.WithdrawerService/ListWithdrawer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).ListWithdrawer(ctx, req.(*ListWithdrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_DeleteWithdrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWithdrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).DeleteWithdrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/withdrawer.WithdrawerService/DeleteWithdrawer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).DeleteWithdrawer(ctx, req.(*DeleteWithdrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawerService_GetExchangeWithdrawOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeWithdrawOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawerServiceServer).GetExchangeWithdrawOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/withdrawer.WithdrawerService/GetExchangeWithdrawOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawerServiceServer).GetExchangeWithdrawOptions(ctx, req.(*GetExchangeWithdrawOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WithdrawerService_ServiceDesc is the grpc.ServiceDesc for WithdrawerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithdrawerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "withdrawer.WithdrawerService",
	HandlerType: (*WithdrawerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWithdrawer",
			Handler:    _WithdrawerService_CreateWithdrawer_Handler,
		},
		{
			MethodName: "ListWithdrawer",
			Handler:    _WithdrawerService_ListWithdrawer_Handler,
		},
		{
			MethodName: "DeleteWithdrawer",
			Handler:    _WithdrawerService_DeleteWithdrawer_Handler,
		},
		{
			MethodName: "GetExchangeWithdrawOptions",
			Handler:    _WithdrawerService_GetExchangeWithdrawOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/withdraw.proto",
}
