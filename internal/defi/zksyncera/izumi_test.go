package zksyncera

import (
	"context"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/hardstylez72/cry/internal/defi"
	v1 "github.com/hardstylez72/cry/internal/pb/gen/proto/go/v1"
	"github.com/hardstylez72/cry/internal/tests"
	"github.com/stretchr/testify/assert"
)

func TestIzumi(t *testing.T) {
	r, err := NewMainNetClient(&ClientConfig{RPCEndpoint: MainNetURL, HttpCli: tests.GetConfig().Cli})
	assert.NoError(t, err)
	assert.NotNil(t, r)

	ctx := context.Background()

	//data, err := r.makeMaverickSwapData(ctx, v1.Token_USDC, v1.Token_ETH, tests.GetConfig().Wallet, big.NewInt(10*10e5))
	//assert.NoError(t, err)
	//println("0x" + common.Bytes2Hex(data))

	//t.Run("USDC -> ETH", func(t *testing.T) {
	//	t.Skip()
	//	am := defi.TokenAmountFloatToWEI(10, v1.Token_USDC)
	//
	//	data, err := r.makeIzumiSwapData(ctx, v1.Token_USDC, v1.Token_ETH, tests.GetConfig().Wallet, am)
	//	assert.NoError(t, err)
	//	println("have: " + "0x" + common.Bytes2Hex(data))
	//	expected := "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000124c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064c1fdbb00000000000000000000000000000000000000000000000000000000015200d500000000000000000000000000000000000000000000000000298243e92ecc94000000000000000000000000000000000000000000000000000000000000003c3355df6d4c9c3035724fd0e3914de96a5a83aaf4afa8ca24eac27b5ae680b7856e54fdb06b5f60be5aea5775959fbc2557cc8789bc1bf90a239d9a910000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a6e7c137a6691d55693ca3bc7e5c698d9d4381500000000000000000000000000000000000000000000000000000000"
	//	println("want: " + expected)
	//})

	t.Run("ETH -> USDC", func(t *testing.T) {
		am := defi.TokenAmountFloatToWEI(0.001, v1.Token_ETH)

		req := &defi.DefaultSwapReq{
			Network:   v1.Network_ZKSYNCERA,
			Amount:    am,
			FromToken: v1.Token_ETH,
			ToToken:   v1.Token_USDC,
			WalletPK:  tests.GetConfig().PK,
			Debug:     true,
		}

		data, err := r.makeIzumiSwapData(ctx, req)
		assert.NoError(t, err)
		println("have: " + "0x" + common.Bytes2Hex(data))
		expected := "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000124c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000004a6e7c137a6691d55693ca3bc7e5c698d9d438150000000000000000000000000000000000000000000000000000000064c20b940000000000000000000000000000000000000000000000000043b18571aca812000000000000000000000000000000000000000000000001ec0b01226c6193ad000000000000000000000000000000000000000000000000000000000000003c5aea5775959fbc2557cc8789bc1bf90a239d9a91b1338207de233ae6a9a6d63309221b577f8cd6e8503234f203fc7eb888eec8513210612a43cf61150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000"
		println("want: " + expected)
	})

}
