// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/swap1inch.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Swap1InchServiceClient is the client API for Swap1InchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Swap1InchServiceClient interface {
	GetNetworks(ctx context.Context, in *GetNetworksRequest, opts ...grpc.CallOption) (*GetNetworksResponse, error)
	GetTokens(ctx context.Context, in *GetTokensRequest, opts ...grpc.CallOption) (*GetTokensResponse, error)
	GetSwapOptions(ctx context.Context, in *GetSwapOptionsRequest, opts ...grpc.CallOption) (*GetSwapOptionsResponse, error)
}

type swap1InchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwap1InchServiceClient(cc grpc.ClientConnInterface) Swap1InchServiceClient {
	return &swap1InchServiceClient{cc}
}

func (c *swap1InchServiceClient) GetNetworks(ctx context.Context, in *GetNetworksRequest, opts ...grpc.CallOption) (*GetNetworksResponse, error) {
	out := new(GetNetworksResponse)
	err := c.cc.Invoke(ctx, "/swap1inch.Swap1inchService/GetNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swap1InchServiceClient) GetTokens(ctx context.Context, in *GetTokensRequest, opts ...grpc.CallOption) (*GetTokensResponse, error) {
	out := new(GetTokensResponse)
	err := c.cc.Invoke(ctx, "/swap1inch.Swap1inchService/GetTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swap1InchServiceClient) GetSwapOptions(ctx context.Context, in *GetSwapOptionsRequest, opts ...grpc.CallOption) (*GetSwapOptionsResponse, error) {
	out := new(GetSwapOptionsResponse)
	err := c.cc.Invoke(ctx, "/swap1inch.Swap1inchService/GetSwapOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Swap1InchServiceServer is the server API for Swap1InchService service.
// All implementations must embed UnimplementedSwap1InchServiceServer
// for forward compatibility
type Swap1InchServiceServer interface {
	GetNetworks(context.Context, *GetNetworksRequest) (*GetNetworksResponse, error)
	GetTokens(context.Context, *GetTokensRequest) (*GetTokensResponse, error)
	GetSwapOptions(context.Context, *GetSwapOptionsRequest) (*GetSwapOptionsResponse, error)
	mustEmbedUnimplementedSwap1InchServiceServer()
}

// UnimplementedSwap1InchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSwap1InchServiceServer struct {
}

func (UnimplementedSwap1InchServiceServer) GetNetworks(context.Context, *GetNetworksRequest) (*GetNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworks not implemented")
}
func (UnimplementedSwap1InchServiceServer) GetTokens(context.Context, *GetTokensRequest) (*GetTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (UnimplementedSwap1InchServiceServer) GetSwapOptions(context.Context, *GetSwapOptionsRequest) (*GetSwapOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwapOptions not implemented")
}
func (UnimplementedSwap1InchServiceServer) mustEmbedUnimplementedSwap1InchServiceServer() {}

// UnsafeSwap1InchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Swap1InchServiceServer will
// result in compilation errors.
type UnsafeSwap1InchServiceServer interface {
	mustEmbedUnimplementedSwap1InchServiceServer()
}

func RegisterSwap1InchServiceServer(s grpc.ServiceRegistrar, srv Swap1InchServiceServer) {
	s.RegisterService(&Swap1InchService_ServiceDesc, srv)
}

func _Swap1InchService_GetNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Swap1InchServiceServer).GetNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swap1inch.Swap1inchService/GetNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Swap1InchServiceServer).GetNetworks(ctx, req.(*GetNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swap1InchService_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Swap1InchServiceServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swap1inch.Swap1inchService/GetTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Swap1InchServiceServer).GetTokens(ctx, req.(*GetTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swap1InchService_GetSwapOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Swap1InchServiceServer).GetSwapOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swap1inch.Swap1inchService/GetSwapOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Swap1InchServiceServer).GetSwapOptions(ctx, req.(*GetSwapOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Swap1InchService_ServiceDesc is the grpc.ServiceDesc for Swap1InchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Swap1InchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swap1inch.Swap1inchService",
	HandlerType: (*Swap1InchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetworks",
			Handler:    _Swap1InchService_GetNetworks_Handler,
		},
		{
			MethodName: "GetTokens",
			Handler:    _Swap1InchService_GetTokens_Handler,
		},
		{
			MethodName: "GetSwapOptions",
			Handler:    _Swap1InchService_GetSwapOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/swap1inch.proto",
}
